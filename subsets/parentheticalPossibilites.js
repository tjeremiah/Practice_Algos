// Write a function, parentheticalPossibilities, that takes in a 
// string as an argument. The function should return an array containing
//  all of the strings that could be generated by expanding all 
//  parentheses of the string into its possibilities.

// For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

const parentheticalPos = (s) => {
    // base case
    if (s.length === 0) return [''];

    let allPos = [];
    const { choices, remainder } = getChoices(s)
    for (let choice of choices ) {
        const remainderPos = parentheticalPos(remainder);
        for (let subString of remainderPos) {
            allPos.push(choice + subString)
        }

    }
    return allPos;
}

const getChoices = (s) => {
    if (s[0] === '(') {
        let end = s.indexOf(')')
        let choices = s.slice(1, end)
        let remainder = s.slice(end + 1)
        return {
            choices,
            remainder
        }
    }
    else {
        let choices = [s[0]];
        let remainder = s.slice(1);
        return {
            choices,
            remainder
        }
    }
}

console.log(parentheticalPos('x(mn)yz'))