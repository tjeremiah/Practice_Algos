// Write a function, parentheticalPossibilities, that takes in a 
// string as an argument. The function should return an array containing
//  all of the strings that could be generated by expanding all 
//  parentheses of the string into its possibilities.

// For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

const parentheticalPos = (s) => { //'x(mn)yz','(mn)yz', 'yz', 'z', ""
    // base case
    if (s.length === 0) return ['']; 

    let allPos = [];                    //'x(mn)yz','(mn)yz', 'yz' , 'z'
    const { choices, remainder } = getChoices(s) //{[x],[(mn)yz]}, {['m','n'], 'yz'}, {[y], 'z'}
    for (let choice of choices ) { //[x], ['m', 'n'] , ['y'], ['z']
        const remainderPos = parentheticalPos(remainder); //'(mn)yz','yz','z', ""
        for (let subString of remainderPos) {
            allPos.push(choice + subString)
        }
    }
    return allPos; 
}

const getChoices = (s) => { //x(mn)yz, (mn)yz, 'yz', 'z'
    if (s[0] === '(') { 
        let end = s.indexOf(')') // 3
        let choices = s.slice(1, end).split("") // ['m','n']
        let remainder = s.slice(end + 1) //'yz'
        return {
            choices, //['m', 'n']
            remainder, // 'yz' 
        }
    }
    else {
        let choices = [s[0]]; //[x], [y], [z]
        let remainder = s.slice(1); // '(mn)yz', 'z', ""
        return {
            choices, //['x'], [y], [z]
            remainder, // '(mn)yz', 'z', ""
        }
    }
}

console.log(parentheticalPos('x(m)yz'))